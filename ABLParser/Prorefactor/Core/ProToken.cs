using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Antlr4.Runtime;

namespace ABLParser.Prorefactor.Core
{
    public class ProToken : IToken
    {
        private const string INVALID_TYPE = "Invalid type number ";

        // All preprocessor statements (&MESSAGE, &ANALYZE-SUSPEND and RESUME, &GLOBAL/SCOPED DEFINE and &UNDEFINE) go to this channel
        public const int PREPROCESSOR_CHANNEL = 2;
        // All &_PROPARSE statements go to this channel
        public const int PROPARSE_CHANNEL = 3;

        private ABLNodeType type;
        private int fileIndex = 0;
        private int endFileIndex;
        private string fileName;
        private int endLine;
        private int endCharPositionInLine;
        private int macroSourceNum;

        private string analyzeSuspend = null;
        private ProToken hiddenBefore = null;
        private bool macroExpansion;
        private bool synthetic = false;

        private ProToken(ABLNodeType type, string text)
        {
            this.type = type;
            this.Text = text;
        }

        public int Type
        {
            get => type.Type;            
        }

        public virtual ABLNodeType NodeType
        {
            get => type;
            set => this.type = value ?? throw new System.ArgumentException(INVALID_TYPE + value);
        }

        public string Text { get; }

        public int Line { get; private set; }

        public int Column { get; private set; } = 0;

        public int Channel { get; set; } = TokenConstants.DefaultChannel;

        public int TokenIndex { get; set; } = -1;

        public int StartIndex => -1;

        public int StopIndex => -1;

        public ITokenSource TokenSource => null;

        public ICharStream InputStream => null;
        /// <returns> 0 if token coming from main file, anything else (greater than 0) for tokens coming from include files </returns>
        public virtual int FileIndex => fileIndex;

        /// <summary>
        /// TODO Can probably be removed in the future </summary>
        /// <returns> Macro source number </returns>
        public virtual int MacroSourceNum => macroSourceNum;

        public virtual string FileName => fileName;

        public virtual int EndLine => endLine;

        public virtual int EndCharPositionInLine => endCharPositionInLine;

        public virtual int EndFileIndex => endFileIndex;

        /// <summary>
        /// TODO Improve implementation
        /// </summary>
        /// <returns> Comma-separated list of &amp;ANALYZE-SUSPEND options. Null for code not managed by AppBuilder. </returns>
        public virtual string AnalyzeSuspend => analyzeSuspend;

        /// <summary>
        /// TODO See getAnalyzeSuspend()
        /// </summary>
        /// <returns> True if token is part of an editable section in AppBuilder managed code </returns>
        public virtual bool EditableInAB => (analyzeSuspend == null) || IsTokenEditableInAB(analyzeSuspend);

        /// <summary>
        /// TODO Can probably be removed in the future
        /// </summary>
        /// <returns> True if last character of token was generated from a macro expansion, i.e. {&amp;SOMETHING}. This doesn't
        ///         mean that all characters were generated from a macro, e.g. {&amp;prefix}VarName will return false </returns>
        public virtual bool MacroExpansion => macroExpansion;

        /// <returns> True if token has been generated by ProParser and not by the lexer </returns>
        public virtual bool Synthetic => synthetic;

        /// <returns> True if token has been generated by the lexer and not by ProParser </returns>
        public virtual bool Natural => !synthetic;

        public override bool Equals(object obj)
        {
            if (obj is ProToken tok)
            {
                return ((tok.type == this.type) && (tok.Text.Equals(this.Text)) && (tok.Line == this.Line) && (tok.Column == this.Column) && (tok.fileIndex == this.fileIndex) && (tok.endFileIndex == this.endFileIndex) && (tok.endLine == this.endLine) && (tok.endCharPositionInLine == this.endCharPositionInLine) && (tok.macroSourceNum == this.macroSourceNum));
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(type.ToString(), Text, Line, Column, fileIndex, endFileIndex, endLine) ^ HashCode.Combine(endCharPositionInLine, macroSourceNum); 
        }

        public override string ToString()
        {
            return "[\"" + Text.Replace('\r', ' ').Replace('\n', ' ') + "\",<" + type + ">,macro=" + macroSourceNum + ",start=" + fileIndex + ":" + Line + ":" + Column + ",end=" + endFileIndex + ":" + endLine + ":" + endCharPositionInLine + "]";
        }

        /// <returns> True if token is part of an editable section in AppBuilder managed code </returns>
        //JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
        //ORIGINAL LINE: public static boolean isTokenEditableInAB(@Nonnull String str)
        public static bool IsTokenEditableInAB(string str)
        {
            char[] stringSeparators = { ',' };
            IList<string> attrs = str.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim()).ToList();
            if (attrs.Count == 0 || !"_UIB-CODE-BLOCK".Equals(attrs[0], StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }

            if ((attrs.Count >= 3) && "_CUSTOM".Equals(attrs[1], StringComparison.OrdinalIgnoreCase) && "_DEFINITIONS".Equals(attrs[2], StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ((attrs.Count >= 2) && "_CONTROL".Equals(attrs[1], StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ((attrs.Count == 4) && "_PROCEDURE".Equals(attrs[1]))
            {
                return true;
            }
            else if ((attrs.Count == 5) && "_PROCEDURE".Equals(attrs[1]) && "_FREEFORM".Equals(attrs[4]))
            {
                return true;
            }
            else if ((attrs.Count >= 2) && "_FUNCTION".Equals(attrs[1]))
            {
                return true;
            }

            return false;
        }

        public virtual ProToken HiddenBefore
        {
            get => hiddenBefore;
            set => hiddenBefore = value;
        }

        public class Builder
        {
            private ABLNodeType type;
            private StringBuilder text;

            private int line;
            private int endLine;
            private int column;
            private int endCharPositionInLine;
            private int fileIndex;
            private int endFileIndex;
            private string fileName;

            private int macroSourceNum;

            private string analyzeSuspend = null;
            private ProToken hiddenBefore = null;
            private bool macroExpansion;
            private bool synthetic = false;

            public Builder(ABLNodeType type, string text)
            {
                this.type = type;
                this.text = new StringBuilder(text);
            }

            public Builder(ProToken token)
            {
                this.type = token.type;
                this.text = new StringBuilder(token.Text);
                this.line = token.Line;
                this.column = token.Column;
                this.fileIndex = token.fileIndex;
                this.endFileIndex = token.endFileIndex;
                this.fileName = token.fileName;
                this.endLine = token.endLine;
                this.endCharPositionInLine = token.endCharPositionInLine;
                this.macroSourceNum = token.macroSourceNum;
                this.analyzeSuspend = token.analyzeSuspend;
                this.hiddenBefore = token.hiddenBefore;
                this.macroExpansion = token.macroExpansion;
                this.synthetic = token.synthetic;
            }

            public virtual Builder SetType(ABLNodeType type)
            {
                this.type = type;
                return this;
            }

            public virtual Builder SetLine(int line)
            {
                this.line = line;
                return this;
            }


            public virtual Builder SetEndLine(int endLine)
            {
                this.endLine = endLine;
                return this;
            }

            public virtual Builder SetCharPositionInLine(int charPositionInLine)
            {
                this.column = charPositionInLine;
                return this;
            }

            public virtual Builder SetEndCharPositionInLine(int endCharPositionInLine)
            {
                this.endCharPositionInLine = endCharPositionInLine;
                return this;
            }

            public virtual Builder SetFileIndex(int fileIndex)
            {
                this.fileIndex = fileIndex;
                return this;
            }

            public virtual Builder SetEndFileIndex(int endFileIndex)
            {
                this.endFileIndex = endFileIndex;
                return this;
            }

            public virtual Builder SetFileName(string fileName)
            {
                this.fileName = fileName;
                return this;
            }

            public virtual Builder SetMacroSourceNum(int macroSourceNum)
            {
                this.macroSourceNum = macroSourceNum;
                return this;
            }

            public virtual Builder SetMacroExpansion(bool macroExpansion)
            {
                this.macroExpansion = macroExpansion;
                return this;
            }

            public virtual Builder SetAnalyzeSuspend(string analyzeSuspend)
            {
                this.analyzeSuspend = analyzeSuspend;
                return this;
            }

            public virtual Builder SetHiddenBefore(ProToken hiddenBefore)
            {
                this.hiddenBefore = hiddenBefore;
                return this;
            }

            public virtual Builder SetSynthetic(bool synthetic)
            {
                this.synthetic = synthetic;
                return this;
            }

            public virtual Builder AppendText(string text)
            {
                this.text.Append(text);
                return this;
            }

            public virtual Builder SetText(string text)
            {
                this.text = new StringBuilder(text);
                return this;
            }

            /// <summary>
            /// Merge current builder with another token. Some information is lost in the process.
            /// </summary>
            public virtual Builder MergeWith(ProToken tok)
            {
                this.endLine = tok.endLine;
                this.endCharPositionInLine = tok.endCharPositionInLine;
                this.endFileIndex = tok.endFileIndex;
                if (tok.hiddenBefore != null)
                {
                    AppendText(" ");
                }
                AppendText(tok.Text);

                return this;
            }

            public virtual ProToken Build()
            {
                if (type == null)
                {
                    throw new System.ArgumentException(INVALID_TYPE + type);
                }

                ProToken tok = new ProToken(type, text.ToString())
                {
                    Line = line,
                    endLine = endLine,
                    Column = column,
                    endCharPositionInLine = endCharPositionInLine,
                    fileIndex = fileIndex,
                    endFileIndex = endFileIndex,
                    fileName = fileName,
                    macroSourceNum = macroSourceNum,
                    macroExpansion = macroExpansion,
                    analyzeSuspend = analyzeSuspend,
                    hiddenBefore = hiddenBefore,
                    synthetic = synthetic
                };

                if ((type == ABLNodeType.COMMENT) || (type == ABLNodeType.WS))
                    tok.Channel = TokenConstants.HiddenChannel;
                else if ((type == ABLNodeType.AMPMESSAGE)
                    || (type == ABLNodeType.AMPANALYZESUSPEND)
                    || (type == ABLNodeType.AMPANALYZERESUME)
                    || (type == ABLNodeType.AMPGLOBALDEFINE)
                    || (type == ABLNodeType.AMPSCOPEDDEFINE)
                    || (type == ABLNodeType.AMPUNDEFINE)
                    || (type == ABLNodeType.INCLUDEDIRECTIVE))
                    tok.Channel = PREPROCESSOR_CHANNEL;
                else if (type == ABLNodeType.PROPARSEDIRECTIVE)
                    tok.Channel = PROPARSE_CHANNEL;               

                return tok;
            }
        }
    }

}
