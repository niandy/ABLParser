//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Antlr/Grammar/PreprocessorParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ABLParser.Prorefactor.Proparser.Antlr {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PreprocessorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IPreprocessorParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreprocessorParser.preproIfEval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreproIfEval([NotNull] PreprocessorParser.PreproIfEvalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreprocessorParser.preproIfEval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreproIfEval([NotNull] PreprocessorParser.PreproIfEvalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] PreprocessorParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] PreprocessorParser.NotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparison</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison([NotNull] PreprocessorParser.ComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparison</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison([NotNull] PreprocessorParser.ComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr([NotNull] PreprocessorParser.OrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>or</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr([NotNull] PreprocessorParser.OrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryPlus</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryPlus([NotNull] PreprocessorParser.UnaryPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryPlus</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryPlus([NotNull] PreprocessorParser.UnaryPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd([NotNull] PreprocessorParser.AndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>and</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd([NotNull] PreprocessorParser.AndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinus</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinus([NotNull] PreprocessorParser.UnaryMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinus</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinus([NotNull] PreprocessorParser.UnaryMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atomExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomExpr([NotNull] PreprocessorParser.AtomExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atomExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomExpr([NotNull] PreprocessorParser.AtomExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiply</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiply([NotNull] PreprocessorParser.MultiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiply</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiply([NotNull] PreprocessorParser.MultiplyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>plus</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlus([NotNull] PreprocessorParser.PlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>plus</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlus([NotNull] PreprocessorParser.PlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpr([NotNull] PreprocessorParser.FunctionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpr([NotNull] PreprocessorParser.FunctionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringOp</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringOp([NotNull] PreprocessorParser.StringOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringOp</c>
	/// labeled alternative in <see cref="PreprocessorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringOp([NotNull] PreprocessorParser.StringOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] PreprocessorParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] PreprocessorParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>quotedString</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuotedString([NotNull] PreprocessorParser.QuotedStringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>quotedString</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuotedString([NotNull] PreprocessorParser.QuotedStringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>trueExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrueExpr([NotNull] PreprocessorParser.TrueExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>trueExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrueExpr([NotNull] PreprocessorParser.TrueExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>falseExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFalseExpr([NotNull] PreprocessorParser.FalseExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>falseExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFalseExpr([NotNull] PreprocessorParser.FalseExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unknownExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnknownExpr([NotNull] PreprocessorParser.UnknownExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unknownExpr</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnknownExpr([NotNull] PreprocessorParser.UnknownExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprInParen</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprInParen([NotNull] PreprocessorParser.ExprInParenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprInParen</c>
	/// labeled alternative in <see cref="PreprocessorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprInParen([NotNull] PreprocessorParser.ExprInParenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>absoluteFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbsoluteFunction([NotNull] PreprocessorParser.AbsoluteFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>absoluteFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbsoluteFunction([NotNull] PreprocessorParser.AbsoluteFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ascFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAscFunction([NotNull] PreprocessorParser.AscFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ascFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAscFunction([NotNull] PreprocessorParser.AscFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dateFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateFunction([NotNull] PreprocessorParser.DateFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dateFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateFunction([NotNull] PreprocessorParser.DateFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dayFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDayFunction([NotNull] PreprocessorParser.DayFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dayFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDayFunction([NotNull] PreprocessorParser.DayFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dbTypeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDbTypeFunction([NotNull] PreprocessorParser.DbTypeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dbTypeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDbTypeFunction([NotNull] PreprocessorParser.DbTypeFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>decimalFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalFunction([NotNull] PreprocessorParser.DecimalFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>decimalFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalFunction([NotNull] PreprocessorParser.DecimalFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>encodeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEncodeFunction([NotNull] PreprocessorParser.EncodeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>encodeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEncodeFunction([NotNull] PreprocessorParser.EncodeFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>entryFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntryFunction([NotNull] PreprocessorParser.EntryFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>entryFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntryFunction([NotNull] PreprocessorParser.EntryFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>etimeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEtimeFunction([NotNull] PreprocessorParser.EtimeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>etimeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEtimeFunction([NotNull] PreprocessorParser.EtimeFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpFunction([NotNull] PreprocessorParser.ExpFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpFunction([NotNull] PreprocessorParser.ExpFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>fillFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFillFunction([NotNull] PreprocessorParser.FillFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>fillFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFillFunction([NotNull] PreprocessorParser.FillFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>indexFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexFunction([NotNull] PreprocessorParser.IndexFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>indexFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexFunction([NotNull] PreprocessorParser.IndexFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>integerFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerFunction([NotNull] PreprocessorParser.IntegerFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>integerFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerFunction([NotNull] PreprocessorParser.IntegerFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>int64Function</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt64Function([NotNull] PreprocessorParser.Int64FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>int64Function</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt64Function([NotNull] PreprocessorParser.Int64FunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>keywordFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeywordFunction([NotNull] PreprocessorParser.KeywordFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>keywordFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeywordFunction([NotNull] PreprocessorParser.KeywordFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>keywordAllFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeywordAllFunction([NotNull] PreprocessorParser.KeywordAllFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>keywordAllFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeywordAllFunction([NotNull] PreprocessorParser.KeywordAllFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lcFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLcFunction([NotNull] PreprocessorParser.LcFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lcFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLcFunction([NotNull] PreprocessorParser.LcFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>leftTrimFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeftTrimFunction([NotNull] PreprocessorParser.LeftTrimFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>leftTrimFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeftTrimFunction([NotNull] PreprocessorParser.LeftTrimFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lengthFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLengthFunction([NotNull] PreprocessorParser.LengthFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lengthFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLengthFunction([NotNull] PreprocessorParser.LengthFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>libraryFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLibraryFunction([NotNull] PreprocessorParser.LibraryFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>libraryFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLibraryFunction([NotNull] PreprocessorParser.LibraryFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogFunction([NotNull] PreprocessorParser.LogFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogFunction([NotNull] PreprocessorParser.LogFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lookupFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLookupFunction([NotNull] PreprocessorParser.LookupFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lookupFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLookupFunction([NotNull] PreprocessorParser.LookupFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>maximumFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaximumFunction([NotNull] PreprocessorParser.MaximumFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>maximumFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaximumFunction([NotNull] PreprocessorParser.MaximumFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>memberFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberFunction([NotNull] PreprocessorParser.MemberFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberFunction([NotNull] PreprocessorParser.MemberFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>minimumFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinimumFunction([NotNull] PreprocessorParser.MinimumFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minimumFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinimumFunction([NotNull] PreprocessorParser.MinimumFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>monthFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMonthFunction([NotNull] PreprocessorParser.MonthFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>monthFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMonthFunction([NotNull] PreprocessorParser.MonthFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numEntriesFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumEntriesFunction([NotNull] PreprocessorParser.NumEntriesFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numEntriesFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumEntriesFunction([NotNull] PreprocessorParser.NumEntriesFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>opsysFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpsysFunction([NotNull] PreprocessorParser.OpsysFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>opsysFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpsysFunction([NotNull] PreprocessorParser.OpsysFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>propathFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropathFunction([NotNull] PreprocessorParser.PropathFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>propathFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropathFunction([NotNull] PreprocessorParser.PropathFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>proversionFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProversionFunction([NotNull] PreprocessorParser.ProversionFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>proversionFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProversionFunction([NotNull] PreprocessorParser.ProversionFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>processArchitectureFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcessArchitectureFunction([NotNull] PreprocessorParser.ProcessArchitectureFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>processArchitectureFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcessArchitectureFunction([NotNull] PreprocessorParser.ProcessArchitectureFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>rIndexFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRIndexFunction([NotNull] PreprocessorParser.RIndexFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>rIndexFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRIndexFunction([NotNull] PreprocessorParser.RIndexFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>randomFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRandomFunction([NotNull] PreprocessorParser.RandomFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>randomFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRandomFunction([NotNull] PreprocessorParser.RandomFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>replaceFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReplaceFunction([NotNull] PreprocessorParser.ReplaceFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>replaceFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReplaceFunction([NotNull] PreprocessorParser.ReplaceFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>rightTrimFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRightTrimFunction([NotNull] PreprocessorParser.RightTrimFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>rightTrimFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRightTrimFunction([NotNull] PreprocessorParser.RightTrimFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>roundFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoundFunction([NotNull] PreprocessorParser.RoundFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>roundFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoundFunction([NotNull] PreprocessorParser.RoundFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>squareRootFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSquareRootFunction([NotNull] PreprocessorParser.SquareRootFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>squareRootFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSquareRootFunction([NotNull] PreprocessorParser.SquareRootFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringFunction([NotNull] PreprocessorParser.StringFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringFunction([NotNull] PreprocessorParser.StringFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>substituteFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubstituteFunction([NotNull] PreprocessorParser.SubstituteFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>substituteFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubstituteFunction([NotNull] PreprocessorParser.SubstituteFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>substringFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubstringFunction([NotNull] PreprocessorParser.SubstringFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>substringFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubstringFunction([NotNull] PreprocessorParser.SubstringFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>timeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeFunction([NotNull] PreprocessorParser.TimeFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>timeFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeFunction([NotNull] PreprocessorParser.TimeFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>todayFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTodayFunction([NotNull] PreprocessorParser.TodayFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>todayFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTodayFunction([NotNull] PreprocessorParser.TodayFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>trimFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrimFunction([NotNull] PreprocessorParser.TrimFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>trimFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrimFunction([NotNull] PreprocessorParser.TrimFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>truncateFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTruncateFunction([NotNull] PreprocessorParser.TruncateFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>truncateFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTruncateFunction([NotNull] PreprocessorParser.TruncateFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>weekDayFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWeekDayFunction([NotNull] PreprocessorParser.WeekDayFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>weekDayFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWeekDayFunction([NotNull] PreprocessorParser.WeekDayFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>yearFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterYearFunction([NotNull] PreprocessorParser.YearFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>yearFunction</c>
	/// labeled alternative in <see cref="PreprocessorParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitYearFunction([NotNull] PreprocessorParser.YearFunctionContext context);
}
} // namespace ABLParser.Prorefactor.Proparser.Antlr
